package asistenteVirtual;

import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class AsistenteVirtual {

	public final static String USUARIO = "delucas";
	public final static Date FECHA_HORA = new GregorianCalendar(2018, 3, 1, 15, 15, 0).getTime();

	// CONSTRUCTORES
	public AsistenteVirtual(String s) {
	}

	public AsistenteVirtual() {
	}

	// SALUDAR/*************************************************************************/
	public static String saludar(String f) {
		List<String> list = Arrays.asList("hola", "buen día", "buenas tardes", "buenas noches", "hello", "hi", "hey",
				"buenos dias");
		List<String> list2 = Arrays.asList("chau", "adios", "hasta luego", "bye", "goodbye", "good bye", "saludos",
				"s2");
		String a = list.stream().filter(x -> f.toLowerCase().contains(x)).findFirst().orElse("No entiendo el mensaje");
		String b = list2.stream().filter(x -> f.toLowerCase().contains(x)).findFirst().orElse("No entiendo el mensaje");
		if (a == "No entiendo el mensaje" && b == "No entiendo el mensaje")
			return a;
		if (a != "No entiendo el mensaje")
			return "¡Hola, @" + USUARIO + "!";
		return "Espero haberte sido de ayuda, adios!";
	}

	// AGRADECER/*************************************************************************/
	public static String agradecer(String f) {
		return "No es nada, @" + USUARIO;
	}

	// FECHA/*************************************************************************/
	public static String darFecha(String s) {

		Calendar c1;
		Locale locale = Locale.getDefault();
		AsistenteVirtual nuevo = new AsistenteVirtual();

		if (s.contains("fue")) {
			if (s.contains("ayer")) {
				c1 = nuevo.restarDMA(Calendar.DATE, 1);
			} else {
				int i = nuevo.buscarEntero(s);

				if (s.contains("dias"))
					c1 = nuevo.restarDMA(Calendar.DATE, i);
				else if (s.contains("meses"))
					c1 = nuevo.restarDMA(Calendar.MONTH, i);
				else
					c1 = nuevo.restarDMA(Calendar.YEAR, i);
			}

			String mes = c1.getDisplayName(Calendar.MONTH, Calendar.LONG, locale);
			String dia = c1.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, locale);
			String fecha = "@" + USUARIO + " fue el " + dia + " " + c1.get(Calendar.DATE) + " de " + mes + " de "
					+ c1.get(Calendar.YEAR);

			return fecha;
		}

		if (s.contains("dentro de")) {
			int i = nuevo.buscarEntero(s);

			if (s.contains("dias"))
				c1 = nuevo.sumarDMA(Calendar.DATE, i);
			else if (s.contains("meses"))
				c1 = nuevo.sumarDMA(Calendar.MONTH, i);
			else
				c1 = nuevo.sumarDMA(Calendar.YEAR, i);

			String mes = c1.getDisplayName(Calendar.MONTH, Calendar.LONG, locale);
			String dia = c1.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, locale);
			String fecha = "@" + USUARIO + " será el " + dia + " " + c1.get(Calendar.DATE) + " de " + mes + " de "
					+ c1.get(Calendar.YEAR);
			return fecha;
		}

		if (s.contains("pasaron")) {
			Calendar d1 = nuevo.convertToCalendar(s);
			Calendar d2 = GregorianCalendar.getInstance();
			d2.setTime(FECHA_HORA);
			String f = "@" + USUARIO + " entre el " + nuevo.convertCalendarToString(d1) + " y el "
					+ nuevo.convertCalendarToString(d2) + " pasaron " + nuevo.diasDesde(s) + " días";
			return f;
		}

		if (s.contains("faltan")) {
			Calendar d2 = GregorianCalendar.getInstance();
			d2.setTime(FECHA_HORA);
			String f = "@" + USUARIO + " faltan " + nuevo.tiempoHasta(s) + " dias";
			return f;
		}

		return " ";

	}

	public Calendar convertToCalendar(String s) {

		Calendar c1 = GregorianCalendar.getInstance();
		String vec[] = s.split("[^0-9]+"); // me quedo nomas con los numeros
		// pero en la pos 0 no me copia nada asique tomamos desde 1
		int d = Integer.parseInt(vec[1]);
		int m = 0;
		int a;
		if (vec.length > 2) {
			a = Integer.parseInt(vec[2]);
			c1.set(Calendar.YEAR, a);
		}

		String[] meses = { "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre",
				"octumbre", "noviembre", "diciembre" };
		while (!s.contains(meses[m]))
			m++;

		c1.set(Calendar.DAY_OF_MONTH, d);
		c1.set(Calendar.MONTH, m);

		return c1;
	}

	public int buscarEntero(String s) {
		String regexp = "([0-9]+)";
		Pattern pattern = Pattern.compile(regexp);
		Matcher matcher = pattern.matcher(s);
		matcher.find();
		int i = Integer.parseInt(matcher.group());

		return i;
	}

	public String convertCalendarToString(Calendar c) {
		Locale locale = Locale.getDefault();
		String mes = c.getDisplayName(Calendar.MONTH, Calendar.LONG, locale);
		String fecha = c.get(Calendar.DATE) + " de " + mes + " de " + c.get(Calendar.YEAR);

		return fecha;
	}

	// unifique los metodos de suma, agregando un parametro
	public Calendar sumarDMA(int i, int d) {
		Calendar c1 = GregorianCalendar.getInstance();
		c1.setTime(FECHA_HORA);
		c1.add(i, d);
		return c1;
	}

	// unifique los metodos de resta, agregando un parametro
	public Calendar restarDMA(int i, int d) {
		Calendar c1 = GregorianCalendar.getInstance();
		c1.setTime(FECHA_HORA);
		c1.add(i, -d);
		return c1;
	}

	// lo probe con los test y anda sin el +1... igual recuerdo haberlo probado
	// antes, y andaba solo con el +1
	public long diasDesde(String s1) {

		Calendar d1 = this.convertToCalendar(s1);
		Calendar d2 = GregorianCalendar.getInstance();
		d2.setTime(FECHA_HORA);
		long milisec = d2.getTimeInMillis() - d1.getTimeInMillis();
		long days = milisec / (1000 * 60 * 60 * 24);
		return days;
	}

	// es igual que el anterior pero con el +1 .. se podria unificar
	public long tiempoHasta(String s1) {

		Calendar d1 = this.convertToCalendar(s1);// agregue una validacion a este metodo para que te permita ingresar
													// dia y mes solamente (sin año)
		Calendar d2 = GregorianCalendar.getInstance();
		d2.setTime(FECHA_HORA);
		long milisec = d1.getTimeInMillis() - d2.getTimeInMillis();
		long days = milisec / (1000 * 60 * 60 * 24) + 1;//
		return days;
	}

	// CALCULAR/*************************************************************************/
	public static String hacerPorcentaje(String cadena) {
		String[] parts = cadena.split("%");
		String part1 = parts[0];
		String part2 = parts[1];
		String respuesta = "";

		Pattern pattern = Pattern.compile("([0-9.]+)", Pattern.CASE_INSENSITIVE);
		Matcher matcher = pattern.matcher(part1);

		if (matcher.find()) {

			String numero1 = matcher.group(1);
			// System.out.println("El primer numero es: " + numero1);
			double porcentaje = Double.parseDouble(numero1);

			Pattern pattern1 = Pattern.compile("([0-9]+)", Pattern.CASE_INSENSITIVE);
			Matcher matcher1 = pattern1.matcher(part2);

			if (matcher1.find()) {

				String numero2 = matcher1.group(1);
				// System.out.println("El segundo numero es: " + numero2);

				double num = Double.parseDouble(numero2);

				double rpta = num * porcentaje / 100.0;
				// System.out.println("El " + porcentaje + " % de "+
				// num + " es " + rpta);

				respuesta = String.valueOf(rpta);

				// Devuelvo respuesta completa

			}

		}
		return respuesta;
	}

	public static String calcular(String expression) {
		String res_final;
		String expressionfinal = "";
		double num1, num2, resultado;
		int decremento = 0;
		int indexini = 0;
		int indexbegin = 0;
		String n;
		int indexend = 0;
		int principio;
		ScriptEngineManager manager = new ScriptEngineManager();
		ScriptEngine engine = manager.getEngineByName("js");

		try {

			char[] expressionarray = expression.toCharArray();

			for (int i = 0; i < expressionarray.length; i++) {

				if (expressionarray[i] == '^') {

					// AGREGAR RECURSIVIDAD
					while (expressionarray[i - 1 - decremento] == ' ')
						decremento++;
					decremento++;
					// System.out.println("decremento "+decremento);
					// System.out.println("a que apunta "+expressionarray[i-decremento]);

					if (expressionarray[i - decremento] == ')') {
						int aux;
						aux = decremento;
						while (expressionarray[i - decremento] != '(')
							decremento++;
						String operacion = expression.substring(i - decremento, i - aux + 1);
						// System.out.println(operacion);
						operacion = calcular(operacion);
						// System.out.println(operacion);
						num1 = Double.parseDouble(operacion);
						indexbegin = i - decremento;

					} else {

						indexend = i - decremento + 1;
						// System.out.println("end "+indexend);

						principio = decremento;
						try {
							while ((expressionarray[i - 1 - principio] >= '0'
									&& expressionarray[i - 1 - principio] <= '9')
									|| expressionarray[i - 1 - principio] == '.')
								principio++;
						} catch (Exception a) {
						}

						indexbegin = i - principio;
						// System.out.println("begin "+indexbegin);
						n = expression.substring(indexbegin, indexend);
						num1 = Double.parseDouble(n);
					}

					// System.out.println("primer numero " + num1);
					decremento = 0;
					principio = 0;

					// AGREGAR RECURSIVIDAD
					int aumento = 0;

					while (expressionarray[i + 1 + aumento] == ' ')
						aumento++;
					int indexbegin2 = i + 1 + aumento;
					// System.out.println("que "+expressionarray[i+1+aumento]);
					if (expressionarray[i + aumento + 1] == '(') {
						int aux;
						aux = aumento;

						while (expressionarray[i + aumento] != ')')
							aumento++;

						// System.out.println(expressionarray[i+aumento]);
						// System.out.println(expressionarray[i+aux+1]);
						String operacion = expression.substring(i + aux + 1, i + aumento + 1);
						// System.out.println(operacion);
						operacion = calcular(operacion);
						// System.out.println(operacion);
						num2 = Double.parseDouble(operacion);
						indexend = i + aumento + 1;

					} else {

						try {
							while ((expressionarray[i + 1 + aumento] >= '0' && expressionarray[i + 1 + aumento] <= '9')
									|| expressionarray[i + 1 + aumento] == '.')
								aumento++;
						} catch (Exception a) {
						}

						indexend = i + aumento + 1;
						// System.out.println(indexend);
						String m = expression.substring(indexbegin2, indexend);
						num2 = Double.parseDouble(m);
						// System.out.println("segundo numero " + num2);
					}

					resultado = Math.pow(num1, num2);
					// System.out.println("El resultado es " + resultado);

					String res = String.valueOf(resultado);
					String a = expression.substring(indexini, indexbegin);
					// System.out.println("soy a"+a);
					// String b = expression.substring(indexend, expression.length());

					// System.out.println("res"+res);
					// System.out.println("b"+b);

					expressionfinal = expressionfinal + a + res;
					indexini = indexend;
					// System.out.println("expresion final"+expressionfinal);

				}

				// AGREGAR RECURSIVIDAD
				if (expressionarray[i] == 'r' || expressionarray[i] == 'R') {
					int aumento = 0;
					indexbegin = 0;
					indexend = 0;
					// int aumento2=0;

					double raiz = expressionarray[i + 1] - '0';
					// System.out.println(raiz);
					double numero;
					while (expressionarray[i + 2 + aumento] == ' ')
						aumento++;
					indexbegin = i + 2 + aumento;

					try {
						while ((expressionarray[i + 2 + aumento] >= '0' && expressionarray[i + 2 + aumento] <= '9')
								|| expressionarray[i + 2 + aumento] == '.')
							aumento++;
					} catch (Exception e) {
					}

					indexend = i + aumento + 2;

					String num = expression.substring(indexbegin, indexend);
					// System.out.println("num"+num);

					numero = Double.parseDouble(num);
					numero = Math.pow(numero, 1.0 / raiz);

					String res = String.valueOf(numero);
					String a = expression.substring(indexini, i);
					// String b = expression.substring(indexend, expression.length());

					expressionfinal = expressionfinal + a + res;
					indexini = indexend;

					// System.out.println(expression);

				}

			}

			String resto = expression.substring(indexini, expression.length());
			// System.out.println(resto);
			expressionfinal = expressionfinal + resto;

			Object result = engine.eval(expressionfinal);
			res_final = result.toString();

			return res_final;

			// System.out.println(result);

		} catch (ScriptException se) {
			// System.out.println(se);
		}

		return null;

	}
}