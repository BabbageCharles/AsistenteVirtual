package asistenteVirtual;

import java.util.Arrays;
import java.util.List;

public class AsistenteEscucha extends AsistenteVirtual {

	// CONSTRUCTORES
	public AsistenteEscucha(String s) {
		// TODO Auto-generated constructor stub
	}

	public AsistenteEscucha() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
		System.out.println(AsistenteEscucha.escuchar("@jenkins cuánto es 1 + 2"));

	}

	// RESPONDE
	public static String escuchar(String msjIn) {
		AsistenteEscucha nuevoEscucha = new AsistenteEscucha();
		
		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Saludar"))// UN SOLO PEDIDO
			return AsistenteVirtual.saludar(msjIn);

		if (nuevoEscucha.reconocerPedidos(msjIn).equals("DarFecha"))
			return AsistenteVirtual.darFecha(msjIn);

		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Agradecer"))
			return AsistenteVirtual.agradecer(msjIn);
		
		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Calcular")) {
			if(msjIn.contains("%"))
				return AsistenteVirtual.porcentaje(msjIn);
			else
			{
				if(msjIn.contains("(")){
					int pos= msjIn.indexOf("(");
					String s = msjIn.substring(pos);
					return AsistenteVirtual.calculo(s);
				}
				else {
				String n= Integer.toString(Utilitarias.buscarEntero(msjIn));				
				int pos= msjIn.indexOf(n);
				String s = msjIn.substring(pos);				
				return AsistenteVirtual.calculo(s); 
				}
			}			
		}
		
		if(msjIn.contains("leyes") || msjIn.contains("robótica")) {
			String leyes= ("1-Un robot no hará daño a un ser humano, ni permitirá con su inacción que sufra daño.\n"
									+"2-Un robot debe cumplir las órdenes dadas por los seres humanos, a excepción de aquellas que entrasen en conflicto con la primera ley.\n"
									+"3-Un robot debe proteger su propia existencia en la medida en que esta protección no entre en conflicto con la primera o con la segunda ley.");
			//System.out.println(leyes);
			return leyes;
		}
			

		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Saludar-Agradecer")) {// DOS PEDIDOS
			return AsistenteVirtual.saludar(msjIn) + "," + AsistenteVirtual.agradecer(msjIn);
		}

//		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Saludar-DarFecha")) {
//			return AsistenteVirtual.saludar(msjIn) + "," + AsistenteVirtual.darFecha(msjIn);
//		}
//		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Agradecer-DarFecha")) {
//			return AsistenteVirtual.agradecer(msjIn) + "," + AsistenteVirtual.darFecha(msjIn);
//		}
		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Saludar-Calcular")) {
			return AsistenteVirtual.saludar(msjIn) + "," + AsistenteVirtual.calculo(msjIn);
		}
		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Agradecer-Calcular")) {
			return AsistenteVirtual.agradecer(msjIn) + "," + AsistenteVirtual.calculo(msjIn);
		}
//		if (nuevoEscucha.reconocerPedidos(msjIn).equals("DarFecha-Calcular")) {
//			return AsistenteVirtual.darFecha(msjIn) + "," + AsistenteVirtual.calculo(msjIn);
//		}
		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Saludar-Agradecer-DarFecha")) {// TRES PEDIDOS
			return AsistenteVirtual.saludar(msjIn) + "," + AsistenteVirtual.agradecer(msjIn);

		}
		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Saludar-Agradecer-Calcular")) {
			return AsistenteVirtual.saludar(msjIn) + "," + AsistenteVirtual.agradecer(msjIn) + ","
					+ AsistenteVirtual.calculo(msjIn);

		}
//		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Saludar-DarFecha-Calcular")) {
//			return AsistenteVirtual.saludar(msjIn) + "," + AsistenteVirtual.calculo(msjIn) + ","
//					+ AsistenteVirtual.darFecha(msjIn);

//		}
//		if (nuevoEscucha.reconocerPedidos(msjIn).equals("Saludar-Agradecer-DarFecha-Calcular")) {// 4 PEDIDOS
//			return AsistenteVirtual.saludar(msjIn) + "," + AsistenteVirtual.calculo(msjIn) + ","
//					+ AsistenteVirtual.darFecha(msjIn) + "," + AsistenteVirtual.agradecer(msjIn);
//		}

		return "Disculpa... no entiendo el pedido, @" + USUARIO + " ¿podrías repetirlo?";// NO ENTENDIMIENTO DEL MENSAJE
	}

	// RECONOCE DE QUE PEDIDO SE TRATA
	public String reconocerPedidos(String msj) {
		String error = new String("No entiendo el mensaje");
		List<String> saludos = Arrays.asList("chau", "adios", "hasta luego", "bye", "goodbye", "good bye", "saludos",
				"s2", "hola", "hello", "buen dia", "buen día", "hey", "buenos dias", "buenas", "buenas tardes",
				"buenas noches", "alo", "holis", "holi", "hi");
		List<String> agradecimientos = Arrays.asList("agradezco", "gracias", "thanks", "ty", "thank you", "arigato");
		List<String> fechas = Arrays.asList("qué día será", "que dia sera", "que dia", "cuantos dias", "que dia será",
				"lunes", "martes", "miércoles", "jueves", "viernes", "cuántos dias", "qué día será dentro de",
				"qué dia", "cuánto falta", "qué dia", "cuántas semanas", "cuántos meses", "cuantas semanas",
				"cuantos meses", "hace cuánto", "pasaron desde", "faltan hasta", "días para", "semanas para",
				"meses para","hora","la fecha por favor","¿qué día es","hoy","me decís la fecha");
		List<String> calculos = Arrays.asList("Cuánto es", "%", "+", "-", "elevado a", "raiz de", "menos", "*", "5/5",
				":", "^", "dividido", "sqrt", "porciento", "resultado de", "al cuadrado", "al cubo", "a la cuarta",
				"raiz cuadrada", "raíz cúbica");

		String a = saludos.stream().filter(x -> msj.toLowerCase().contains(x)).findFirst().orElse(error);
		String b = agradecimientos.stream().filter(x -> msj.toLowerCase().contains(x)).findFirst().orElse(error);
		String c = fechas.stream().filter(x -> msj.toLowerCase().contains(x)).findFirst().orElse(error);
		String d = calculos.stream().filter(x -> msj.toLowerCase().contains(x)).findFirst()
				.orElse("No entiendo el mensaje");

		// un solo pedido
		if (!a.equals(error) && b.equals(error) && c.equals(error) && d.equals(error))
			return "Saludar";

		if (a.equals(error) && !b.equals(error) && c.equals(error) && d.equals(error))
			return "Agradecer";

		if (a.equals(error) && b.equals(error) && !c.equals(error) && d.equals(error))
			return "DarFecha";

		if (a.equals(error) && b.equals(error) && c.equals(error) && !d.equals(error))
			return "Calcular";

		// dos pedidos
		if (!a.equals(error) && !b.equals(error) && c.equals(error) && d.equals(error))
			return "Saludar-Agradecer";

		if (!a.equals(error) && b.equals(error) && !c.equals(error) && d.equals(error))
			return "Saludar-DarFecha";

		if (a.equals(error) && !b.equals(error) && !c.equals(error) && d.equals(error))
			return "Agradecer-DarFecha";

		if (!a.equals(error) && b.equals(error) && c.equals(error) && !d.equals(error))
			return "Saludar-Calcular";
		if (!a.equals(error) && !b.equals(error) && c.equals(error) && !d.equals(error))
			return "Agradecer-Calcular";

		if (!a.equals(error) && b.equals(error) && !c.equals(error) && !d.equals(error))
			return "DarFecha-Calcular";

		// tres pedidos 
		if (!a.equals(error) && !b.equals(error) && !c.equals(error) && d.equals(error))
			return "Saludar-Agradecer-DarFecha";

		if (!a.equals(error) && !b.equals(error) && c.equals(error) && !d.equals(error))
			return "Saludar-Agradecer-Calcular";

		if (!a.equals(error) && b.equals(error) && !c.equals(error) && !d.equals(error))
			return "Saludar-DarFecha-Calcular";

		// cuatro pedidos o no entendimiento
		if (!a.equals(error) && !b.equals(error) && !c.equals(error) && !d.equals(error))
			return "Saludar-Agradecer-DarFecha-Calcular";
		else
			return "Disculpa... no entiendo el pedido, @" + USUARIO + " ¿podrías repetirlo?";
	}

}
